(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{294:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"“script”-标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#“script”-标签"}},[t._v("#")]),t._v(" “script” 标签")]),t._v(" "),a("p",[t._v("可以插入到HTML的任何地方")]),t._v(" "),a("h2",{attrs:{id:"外部链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部链接"}},[t._v("#")]),t._v(" 外部链接")]),t._v(" "),a("p",[t._v("不能同时有src和里面的代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这将不会工作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n")])])]),a("h2",{attrs:{id:"代码结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码结构"}},[t._v("#")]),t._v(" 代码结构")]),t._v(" "),a("p",[t._v("当存在分行符(line break)时，在大多数情况下可以省略分号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在这，JavaScript 将分行符理解成“隐式”的分号。这也被称为 自动分号插入")]),t._v(" "),a("p",[t._v("但是也有例外的情况 ：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"There will be an error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("现在，如果我们运行代码，只有第一个 alert 语句的内容被显示了出来，随后我们收到了一 个错误!\n但是，如果我们在第一个 alert 语句末尾加上一个分号，就工作正常了:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"All fine now"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("出现无分号变量(variant)的错误，是因为 JavaScript 并不会在方括号 [...] 前添加一个隐\n式的分号。")]),t._v(" "),a("h2",{attrs:{id:"现代模式，-use-strict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现代模式，-use-strict"}},[t._v("#")]),t._v(' 现代模式，"use strict"')]),t._v(" "),a("p",[t._v("这个指令看上去像一个字符串 \"use strict\" 或者 'use strict' 。当它处于脚本文件的顶 部时，则整个脚本文件都将以“现代”模式进行工作。")]),t._v(" "),a("ul",[a("li",[t._v("确保use strict出现在脚本的最顶端")]),t._v(" "),a("li",[t._v("没有办法取消use strict")])]),t._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),a("h3",{attrs:{id:"_7种数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7种数据类型"}},[t._v("#")]),t._v(" 7种数据类型")]),t._v(" "),a("ul",[a("li",[t._v("number --- 可以是浮点数，可以是整数")]),t._v(" "),a("li",[t._v("string --- 字符串类型")]),t._v(" "),a("li",[t._v("boolean --- 逻辑值 true false")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("object 和 symbol")])]),t._v(" "),a("h3",{attrs:{id:"变量命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量命名"}},[t._v("#")]),t._v(" 变量命名")]),t._v(" "),a("p",[t._v("JavaScript 的变量命名有两个限制:")]),t._v(" "),a("ul",[a("li",[t._v("变量名称必须仅包含字母，数字，符号 $ 和 _ 。")]),t._v(" "),a("li",[t._v("首字符必须非数字。")])]),t._v(" "),a("h3",{attrs:{id:"大写形式的常数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大写形式的常数"}},[t._v("#")]),t._v(" 大写形式的常数")]),t._v(" "),a("p",[t._v("使用大写字母和下划线来命名这些常量。")]),t._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h3",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" number 类型")]),t._v(" "),a("p",[t._v("number 类型代表整数和浮点数。"),a("br"),t._v("\n数字可以有很多操作，比如，乘法 * 、除法 / 、加法 + 、减法 - 等等。"),a("br"),t._v("\n除了常规的数字，还包括所谓的“特殊数值(“special numeric values”)”也属于这种类型: Infinity 、 -Infinity 和 NaN 。")]),t._v(" "),a("h3",{attrs:{id:"string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" string 类型")]),t._v(" "),a("h3",{attrs:{id:"boolean-类型-逻辑类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型-逻辑类型"}},[t._v("#")]),t._v(" boolean 类型(逻辑类型)")]),t._v(" "),a("h3",{attrs:{id:"“null”-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#“null”-值"}},[t._v("#")]),t._v(" “null” 值")]),t._v(" "),a("h3",{attrs:{id:"“undefined”-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#“undefined”-值"}},[t._v("#")]),t._v(" “undefined” 值")]),t._v(" "),a("h3",{attrs:{id:"object-类型和-symbol-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型和-symbol-类型"}},[t._v("#")]),t._v(" object 类型和 symbol 类型")]),t._v(" "),a("h2",{attrs:{id:"字符串转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串转换"}},[t._v("#")]),t._v(" 字符串转换")]),t._v(" "),a("p",[t._v("数字型转换：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("值")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("变成...")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("NaN")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("true/ false")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("1/0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为   。否则，将会从剩余字 符串中“读取”数字。当类型转换出现 error 时返回")])])])]),t._v(" "),a("p",[t._v("上述的大多数规则都容易理解和记忆。人们通常会犯错误的值得注意的例子有以下几个:")]),t._v(" "),a("ul",[a("li",[t._v("对进行数字型转换时，输出结果为 NaN ，而非 0 。")]),t._v(" "),a("li",[t._v('对 "0" 和只有空格的字符串(比如: " " )进行布尔型转换时，输出结果为 true 。')])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "10" 加号首先会解析为字符串连接的加号而不是数学的加号')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1 减号会将字符串转为数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 这里的加号解析成数学的加号 true为1 false为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9px 4+5首先解析为数学的加号，后面再是字符串的拼接加号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "$45"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4px"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" -9 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "-95"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" -9 "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -14")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" \\t \\n"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-2")]),t._v("\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("h3",{attrs:{id:"位运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),a("ul",[a("li",[t._v("按位与( )")]),t._v(" "),a("li",[t._v("按位或( )")]),t._v(" "),a("li",[t._v("按位异或( )")]),t._v(" "),a("li",[t._v("按位非( )")]),t._v(" "),a("li",[t._v("左移( )")]),t._v(" "),a("li",[t._v("右移( )")]),t._v(" "),a("li",[t._v("无符号右移 ( >>> )")])]),t._v(" "),a("h2",{attrs:{id:"相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等"}},[t._v("#")]),t._v(" 相等")]),t._v(" "),a("p",[t._v("有时候，以下两种情况会同时发生:")]),t._v(" "),a("ul",[a("li",[t._v("若直接比较两个值，其结果是相等的。")]),t._v(" "),a("li",[t._v("若把两个值转为布尔值，它们可能得出完全相反的结果，即一个是 true ，一个是\nfalse 。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true!")]),t._v("\n")])])]),a("h2",{attrs:{id:"严格相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格相等"}},[t._v("#")]),t._v(" 严格相等")]),t._v(" "),a("p",[t._v("严格相等操作符 === 在进行比较时不会做任何的类型转换。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("比较运算符始终返回布尔值。")]),t._v(" "),a("li",[t._v("字符串的比较，会按照“词典”顺序逐字符地比较大小。\n的变量，请按需要分别检查它")]),t._v(" "),a("li",[t._v("当对不同类型的值进行比较时，它们会先被转化为数字(不包括严格相等检测)再进行比较。")]),t._v(" "),a("li",[t._v("在非严格相等   下， null 和 undefined 相等且各自不等于任何其他的值。")]),t._v(" "),a("li",[t._v("在使用 > 或   进行比较时，需要注意变量可能为 null/undefined 的情况。比较好的方法 是单独检查变量是否等于 null/undefined 。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apple"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pineapple"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n0\\n"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n0\\n"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("h2",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("h3",{attrs:{id:"或运算寻找第一个真值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#或运算寻找第一个真值"}},[t._v("#")]),t._v(" 或运算寻找第一个真值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" value2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" value3\n")])])]),a("p",[t._v("或运算做了一下的事情：")]),t._v(" "),a("ul",[a("li",[t._v("从左到右依次计算操作数。")]),t._v(" "),a("li",[t._v("将每一个操作数转化为布尔值。如果结果是 true ，就停止计算，返回这个操作数的初始值。")]),t._v(" "),a("li",[t._v("如果所有的操作数都被计算过(也就是，转换结果都是 false )，返回最后一个操作数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1(第一个真值)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0(所有的转化结果都是 false，返回最后一个值)")]),t._v("\n")])])]),a("h3",{attrs:{id:"与操作寻找第一个假值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与操作寻找第一个假值"}},[t._v("#")]),t._v(" 与操作寻找第一个假值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value3\n")])])]),a("p",[t._v("与运算 && 做了如下的事情:")]),t._v(" "),a("ul",[a("li",[t._v("从左到右依次计算操作数。")]),t._v(" "),a("li",[t._v("将每一个操作数转化为布尔值。如果结果是 false ，就停止计算，返回这个操作数的初始值。")]),t._v(" "),a("li",[t._v("如果所有的操作数都被计算过(也就是，转换结果都是 true )，返回最后一个操作数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果第一个操作符是真值， // 与操作返回第二个操作数: alert( 1 && 0 ); // 0 alert( 1 && 5 ); // 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果第一个操作符是假值，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与操作直接返回它。第二个操作数被忽略 alert( null && 5 ); // null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no matter what"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("与运算要比或运算有限级高 所以a&&b||c&&d 相当于(a&&b)||(d&&d)")])]),t._v(" "),a("h2",{attrs:{id:"循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),a("ul",[a("li",[t._v("while —— 每次迭代之前都要检查条件。")]),t._v(" "),a("li",[t._v("do..while —— 每次迭代后都要检查条件。")]),t._v(" "),a("li",[t._v("for (;😉 —— 每次迭代之前都要检查条件，可以使用其他设置。")])]),t._v(" "),a("p",[t._v("通常使用 while(true) 来构造“无限”循环。这样的循环就像任何其他循环一样，可以通过 break 指令来终止。\n如果我们不想在当前迭代中做任何事，并且想要转移至下一次迭代，那么 continue 指令就会执 行它。\nbreak/continue 支持循环前的标签。标签是 break/continue 跳出嵌套循环来转到外部循 环的唯一方法。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//标签跳出最外层循环")]),t._v("\nouter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     let input = prompt(`Value at coords (${i},${j})`, '');")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("思考题")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 1 2 3 4")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 1 2 3 4")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p76")]),t._v("\n")])])]),a("p",[t._v("注意： switch case里的是严格相等，既 ===， 所以'3'跟3是不等的")]),t._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("ul",[a("li",[t._v("作为参数传递给函数，值被复制到其局部变量")]),t._v(" "),a("li",[t._v("函数可以访问外部变量。但它只能从内到外起作用。函数外部的代码看不到它的局部变量。")]),t._v(" "),a("li",[t._v("函数可以返回值。如果没有，则其结果是 undefined 。\n为了使代码简洁易懂，建议在函数中主要使用局部变量和参数，而不是外部变量。\n与不获取参数但作为副作用修改外部变量的函数相比，理解获取参数、与它们一起工作并返回结果\n的函数总是更容易理解。\n函数命名:")]),t._v(" "),a("li",[t._v("名称应该清楚地描述函数的功能。当我们在代码中看到一个函数调用时，一个好的名称立即让 我们了解它所做的和返回的事情。")]),t._v(" "),a("li",[t._v("一个函数是一个行为，所以函数名通常是动词。")]),t._v(" "),a("li",[t._v("有许多优秀的函数前缀，如 create... 、 show... 、 get... 、 check... 等等。使用它们来提示函\n数的作用。\n函数是脚本的主要构建块。现在我们已经介绍了基本知识，这样我们就可以开始创建和使用它们\n了。但这只是道路的开始。我们将多次回到它们身上，更深入地研究它们的先进特征。")])]),t._v(" "),a("p",[t._v("总结")]),t._v(" "),a("ul",[a("li",[t._v("函数是值。他们可以在代码的任何地方分配，复制或声明。")]),t._v(" "),a("li",[t._v("如果函数在主代码流中声明为单独的语句，那就称为“函数声明”。")]),t._v(" "),a("li",[t._v("如果该函数是作为表达式的一部分创建的，则称其为“函数表达式”。")]),t._v(" "),a("li",[t._v("函数声明在代码块执行之前处理。它们在代码块中随处调用。")]),t._v(" "),a("li",[t._v("函数表达式在执行流程到时创建。\n在大多数情况下，当我们需要声明一个函数时，函数声明是可取的，因为它在声明本身之前是可见\n的。这给了我们更多的代码组织的灵活性，并且通常更具可读性。\n所以我们应该只在函数声明不适合任务时才使用函数表达式。在本章中我们已经看到了几个例子，\n并且将来会看到更多的例子。\n箭头函数非常适合单行调用，以下是其两个特点。")])]),t._v(" "),a("ol",[a("li",[t._v("没有大括号: (...args) => expression —— 右侧是一个表达式:该函数对其进行运行 并返回结果。")]),t._v(" "),a("li",[t._v("有大括号: —— 括号允许我们在函数中写入多个语句，但是我们 需要一个显式的   来返回一些东西。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);