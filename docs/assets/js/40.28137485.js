(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{344:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("参考 "),t("a",{attrs:{href:"https://juejin.im/post/5d5f29dde51d456216553519",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://juejin.im/post/5d5f29dde51d456216553519"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"交换变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交换变量"}},[e._v("#")]),e._v(" 交换变量")]),e._v(" "),t("p",[e._v("不使用解构")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let a = 1, b = 2, temp;\ntemp = a; a = b; b = temp;\n\nconsole.log(a); // 2\nconsole.log(b); // 1\n")])])]),t("p",[e._v("使用解构")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let a = 1, b=2;\n[a, b] = [b, a];\n\nconsole.log(a); // 2\nconsole.log(b); // 1\n\n//解构两个以上变量\n\nlet zero=2, one=1, two=0;\n[zero, one, two] = [two, one, zero];\n")])])]),t("h3",{attrs:{id:"访问数组中的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问数组中的元素"}},[e._v("#")]),e._v(" 访问数组中的元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//访问数组的第一项，若不存在则指定默认值\nconst colors = [];\nlet firstColor = colors[0] || 'red';\n\n//使用解构\n\nlet [firstColor = 'red'] = colors;\nconsole.log(firstColor); //red\n\n//若是解构第二个\n\nlet [, secondColor = 'white'] = colors;\n//左侧逗号表示忽略第一个元素，使用index为1进行赋值\n\n")])])]),t("h3",{attrs:{id:"不可变的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不可变的操作"}},[e._v("#")]),e._v(" 不可变的操作")]),e._v(" "),t("p",[e._v("不可变性 要求不能改变原始对象。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//数组解构\nconst numbers = [1,2,3];\nconst [, ...foodNumbers] = numbers;\n\nfoodNumbers; // [2,3];\nnumbers; // [1,2,3];\n\n//对象解构\nconst value = {\n  foo: 'Foo',\n  bar: 'Bar'\n};\n\nconst { foo, ...valueBar } = value;\n\nvalueBar;// {bar: 'Bar'};\nvalue; // {foo: 'Foo', bar: 'Bar'}\n")])])]),t("h3",{attrs:{id:"解构iterables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构iterables"}},[e._v("#")]),e._v(" 解构iterables")]),e._v(" "),t("p",[e._v("自定义可迭代协议的对象解构。"),t("br"),e._v("\n许多原生基本类型和对象都是可迭代的： array、string、typed arrays、set和map。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const movies = {\n  list: [\n    {title: 'heat'},\n    {title: 'interstellar'}\n  ],\n  [Symbol.interator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if(index < this.list.length) {\n          const value = this.list[index++].title;\n          return { value, done: false };\n        }\n        return {done: true}\n      }\n    }\n  }\n};\nconst [firstMovieTitle] = movies;\nconsole.log(firstMovieTitle);\n\n")])])]),t("p",[t("a",{attrs:{href:"https://codepen.io/syun0216/pen/jONBOGB",target:"_blank",rel:"noopener noreferrer"}},[e._v("codepen"),t("OutboundLink")],1),e._v(";")]),e._v(" "),t("h3",{attrs:{id:"解构动态属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构动态属性"}},[e._v("#")]),e._v(" 解构动态属性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function greet(obj, nameProp) {\n  const { [nameProp]: name = 'unkown' } = obj;\n  return `Hello ${name}`;\n}\n\ngreet({name: 'Batman'}, 'name'); // Hello, Batman\ngreet({}, 'name'); //Hello, unkown\n\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);